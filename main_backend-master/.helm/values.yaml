---
# This is a YAML-formatted file.

replicas: 1

image:
  name: registry.slurm.io/seck8s_main/main_backend
  tag: latest
  imagepullpolicy: Always
imagePullSecret: registry-slurm-io

env:
  # Keys for verify request signed by auth service
  SERVICE_PORT: 3000
  JWT_HMAC_SECRET: 'f3116646-e5a9-4418-93e0-8e09a66c5cd6'
  REDIS_HOST: 'controlplane-redis-master'
  PUMA_MAX_THREADS: 128
  MALLOC_ARENA_MAX: 2
  RDB_HOST: nsk-mysql-slave.nsk
  RDB_PORT: 3306
  RDB_NAME: provider_prod
  RDB_PASS: A8kcemcZyk  # TODO: get this from secret 'nsk-mysql' in ns 'nsk'

#envSecret:
#  REDIS_PASSWORD: controlplane-redis

service:
  port: 3000
  external_port: 80

ingress:
  enabled: true
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}
  host: mainbackend.edu.s000.slurm.io
  tls: []
    # - secretName: mainbackend-s000-slurm-io-tls-secret
    #   hosts:
    #     - mainbackend.s000.slurm.io

prometheus:
  kubeStateMetrics:
    enabled: false
  nodeExporter:
    enabled: false
  pushgateway:
    enabled: false
  alertmanager:
    enabled: false
    strategy:
      type: Recreate
    persistentVolume:
      enabled: false
  server:
    strategy:
      type: Recreate
    persistentVolume:
      enabled: false
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
    retention: "1d"
  serverFiles:
    prometheus.yml:
      rule_files:
        - /etc/config/rules
        - /etc/config/alerts
      scrape_configs:
        - job_name: prometheus
          static_configs:
            - targets:
              - localhost:9090
        - job_name: 'kubernetes-pods'

          kubernetes_sd_configs:
            - role: pod

          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
        - job_name: 'kubernetes-nodes-cadvisor'

          scheme: https

          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

          kubernetes_sd_configs:
            - role: node

          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 256Mi

grafana:
  enabled: false
  rbac:
    pspEnabled: false
  deploymentStrategy:
    type: Recreate
  testFramework:
    enabled: false
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    labels: {}
    path: /
    hosts:
      - chart-example.local
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

  adminUser: slurm
  adminPassword: friend

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: Prometheus
        type: prometheus
        url: http://main-backend-prometheus-server
        access: proxy
        isDefault: true
